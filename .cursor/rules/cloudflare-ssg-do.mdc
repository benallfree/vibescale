---
description: Implementation guide for deploying Vibeverse.js games using Cloudflare Workers, Durable Objects, and Static Site Generation with Bun
globs: 
alwaysApply: true
---
# Cloudflare Workers + Durable Objects + Pure HTML/JS Frontend

## Server Setup

### 1. Initialize Project

```bash
mkdir server
cd server
bun init
```

### 2. Install Dependencies

```bash
bun add @cloudflare/workers-types
```

### 3. Create Durable Object

Create `src/GameRoom.js`:

\```javascript
/**
 * @typedef {Object} Client
 * @property {WebSocket} socket
 * @property {string} id
 */

export class GameRoom {
  constructor(state, env) {
    /** @type {DurableObjectState} */
    this.state = state
    /** @type {Set<Client>} */
    this.clients = new Set()
  }

  /**
   * @param {Request} request
   * @returns {Promise<Response>}
   */
  async fetch(request) {
    if (request.headers.get('Upgrade') !== 'websocket') {
      return new Response('Expected websocket', { status: 400 })
    }

    const { 0: client, 1: server } = new WebSocketPair()
    await this.handleSession(server)

    return new Response(null, {
      status: 101,
      webSocket: client
    })
  }

  /**
   * @param {WebSocket} socket
   */
  async handleSession(socket) {
    socket.accept()

    const clientId = crypto.randomUUID()
    const client = { socket, id: clientId }
    this.clients.add(client)

    socket.addEventListener('message', async (event) => {
      try {
        const data = JSON.parse(event.data)
        switch (data.type) {
          case 'ping':
            socket.send(JSON.stringify({
              type: 'pong',
              message: 'Server received ping!'
            }))
            break
          default:
            socket.send(JSON.stringify({
              type: 'error',
              message: 'Unknown message type'
            }))
        }
      } catch (err) {
        socket.send(JSON.stringify({
          type: 'error',
          message: 'Invalid message format'
        }))
      }
    })

    socket.addEventListener('close', () => {
      this.clients.delete(client)
    })

    socket.addEventListener('error', () => {
      this.clients.delete(client)
    })
  }
}
\```

### 4. Create Worker

Create `src/worker.js`:

\```javascript
/**
 * @param {Request} request
 * @param {*} env
 * @param {*} ctx
 * @returns {Promise<Response>}
 */
export async function fetch(request, env, ctx) {
  try {
    const url = new URL(request.url)
    
    if (url.pathname === '/websocket') {
      // Get game room ID from query or generate new one
      const roomId = url.searchParams.get('room') || crypto.randomUUID()
      
      // Get Durable Object stub
      const id = env.GAME_ROOM.idFromName(roomId)
      const room = env.GAME_ROOM.get(id)
      
      // Forward request to Durable Object
      return room.fetch(request)
    }

    return new Response('Not found', { status: 404 })
  } catch (err) {
    return new Response(err.message, { status: 500 })
  }
}
\```

### 5. Configure Wrangler

Create `wrangler.toml`:

\```toml
name = "myvibegame"
main = "src/worker.js"
compatibility_date = "2024-01-01"

[durable_objects]
bindings = [{name = "GAME_ROOM", class_name = "GameRoom"}]

[[migrations]]
tag = "v1"
new_classes = ["GameRoom"]
\```

## Client Setup

### 1. Initialize Client Project

```bash
mkdir client
cd client
touch index.html
touch app.js
```

### 2. Create Basic HTML Structure

Create `index.html`:

\```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Vibe Game</title>
    <script src="https://cdn.vanjs.org/van-1.2.8.min.js"></script>
    <script src="app.js" type="module"></script>
</head>
<body>
    <div id="app"></div>
</body>
</html>
\```

### 3. Create WebSocket Client Component

Create `app.js`:

\```javascript
const { div, button } = van.tags

/**
 * @typedef {Object} WebSocketState
 * @property {van.State<boolean>} isConnected
 * @property {van.State<string>} error
 * @property {van.State<string[]>} messages
 */

/** @type {WebSocketState} */
const wsState = {
  isConnected: van.state(false),
  error: van.state(''),
  messages: van.state([])
}

/** @type {WebSocket | null} */
let ws = null

const connectWebSocket = () => {
  ws = new WebSocket('wss://myvibegame.workers.dev/websocket')

  ws.onopen = () => {
    wsState.isConnected.val = true
    wsState.error.val = ''
  }

  ws.onmessage = (event) => {
    const data = JSON.parse(event.data)
    switch (data.type) {
      case 'pong':
        wsState.messages.val = [...wsState.messages.val, data.message]
        break
      case 'error':
        wsState.error.val = data.message
        break
    }
  }

  ws.onclose = () => {
    wsState.isConnected.val = false
  }

  ws.onerror = () => {
    wsState.error.val = 'WebSocket connection failed'
    wsState.isConnected.val = false
  }
}

const sendPing = () => {
  if (ws?.readyState === WebSocket.OPEN) {
    ws.send(JSON.stringify({ type: 'ping' }))
  }
}

const WebSocketClient = () => 
  div(
    button({ 
      onclick: sendPing,
      disabled: () => !wsState.isConnected.val
    }, 'Send Ping'),
    div(() => wsState.error.val && 
      div({ class: 'error' }, () => wsState.error.val)
    ),
    div(() => wsState.messages.val.map(msg => 
      div(msg)
    ))
  )

// Initialize the app
connectWebSocket()
van.add(document.getElementById('app'), WebSocketClient())
\```

### 4. Deploy Client

Since we're using a pure HTML/JS approach, you can deploy using any static file hosting:

```bash
# Using Cloudflare Pages via Wrangler
bunx wrangler pages deploy .
```

Or simply upload the files to any static hosting service of your choice.

## Development Workflow

1. Start server development:

```bash
cd server
bunx wrangler dev
```

2. Serve client files locally:

```bash
cd client
python3 -m http.server # or any other simple static file server
```

## Deployment

### 1. Deploy Worker

```bash
cd server
bunx wrangler deploy
```

### 2. Deploy Client

```bash
cd client
bunx wrangler pages deploy .
```

## Testing

### WebSocket Testing

1. Open browser console
2. Connect to WebSocket
3. Send ping message
4. Verify pong response

Example test sequence:

\```javascript
// Manual WebSocket test
const ws = new WebSocket('wss://myvibegame.workers.dev/websocket')
ws.onmessage = console.log
ws.send(JSON.stringify({ type: 'ping' }))
\```

### Room Testing

1. Open two browser windows
2. Connect both to same room ID
3. Verify message broadcast

Example URL with room:
\```
wss://myvibegame.workers.dev/websocket?room=test123
\```

## Security Considerations

1. WebSocket Origin Checking
   - Implement allowed origins in production
   - Add CORS headers for HTTP endpoints

2. Rate Limiting
   - Add connection limits per IP
   - Implement message rate limiting

3. Room Access Control
   - Add authentication for private rooms
   - Implement room capacity limits

## Error Handling

1. Client Reconnection
   - Implement exponential backoff
   - Add reconnection limit

2. Server Errors
   - Log errors to Cloudflare
   - Return appropriate error codes

## Performance Tips

1. Message Batching
   - Batch frequent updates
   - Use binary messages for large data

2. Connection Management
   - Clean up inactive connections
   - Implement heartbeat system

## Monitoring

1. Cloudflare Analytics
   - Monitor WebSocket connections
   - Track message volumes

2. Custom Metrics
   - Track room usage
   - Monitor error rates